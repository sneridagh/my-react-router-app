/*
Don't change this file manually.
It is autogenerated by @plone/registry.
Instead, change the "addons" registration in the app.
*/

import ploneblocks from '@plone/blocks';

const addonsInfo = [{"name":"@plone/blocks","version":"1.0.0-alpha.3","isPublishedPackage":true,"isRegisteredAddon":true,"modulePath":"/Users/sneridagh/Development/plone/my-react-router-app/node_modules/.pnpm/@plone+blocks@1.0.0-alpha.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_storybook@8.5.8_prettier@2.8.8_/node_modules/@plone/blocks","packageJson":"/Users/sneridagh/Development/plone/my-react-router-app/node_modules/.pnpm/@plone+blocks@1.0.0-alpha.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_storybook@8.5.8_prettier@2.8.8_/node_modules/@plone/blocks/package.json","basePath":"/Users/sneridagh/Development/plone/my-react-router-app/node_modules/.pnpm/@plone+blocks@1.0.0-alpha.3_react-dom@19.0.0_react@19.0.0__react@19.0.0_storybook@8.5.8_prettier@2.8.8_/node_modules/@plone/blocks","tsConfigPaths":["",{}],"addons":[]}];
export { addonsInfo };

const safeWrapper = (func) => (config) => {
  const res = func(config);
  if (typeof res === 'undefined') {
    throw new Error("Configuration function doesn't return config");
  }
  return res;
}

const projectConfigLoader = false;
const projectConfig = (config) => {
  return projectConfigLoader && typeof projectConfigLoader.default === "function" ? projectConfigLoader.default(config) : config;
}

const load = (config) => {
  const addonLoaders = [ploneblocks];
  if(!addonLoaders.every((el) => typeof el === "function")) {
    throw new TypeError(
      'Each addon has to provide a function applying its configuration to the projects configuration.',
    );
  }
  return projectConfig(addonLoaders.reduce((acc, apply) => safeWrapper(apply)(acc), config));
};
export default load;
